name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-release:
    name: Build and Release
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: codecho
            asset_name: codecho-linux-amd64

          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: codecho
            asset_name: codecho-linux-arm64

          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: codecho
            asset_name: codecho-macos-amd64

          # macOS ARM64 (Apple Silicon)
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: codecho
            asset_name: codecho-macos-arm64

          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: codecho.exe
            asset_name: codecho-windows-amd64.exe

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        run: |
          rustup show
          rustup target add ${{ matrix.target }}

      # Install cross-compilation tools for Linux ARM64
      - name: Install cross-compilation tools for Linux ARM64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Generate deps cache key
        id: deps-cache-key
        run: |
          # Create cache key from Cargo.lock, excluding only our package's version line
          # This preserves cache across version bumps but invalidates on dependency changes
          DEPS_HASH=$(awk '
            /^\[\[package\]\]/ { in_package=1 }
            in_package && /^name = "codecho"$/ { in_codecho=1 }
            in_package && /^version = / && in_codecho { next }  # Skip version line in codecho package
            in_package && /^$/ { in_package=0; in_codecho=0 }  # Reset at package end
            { print }  # Print all other lines
          ' Cargo.lock | sha256sum | cut -d' ' -f1)
          echo "deps-hash=${DEPS_HASH}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/${{ matrix.target }}/release/deps
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-deps-${{ steps.deps-cache-key.outputs.deps-hash }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-deps-

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }} --bin codecho

      - name: Prepare binary
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a -tzip ../../../${{ matrix.asset_name }}.zip ${{ matrix.binary_name }}
          else
            tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}
          fi
        shell: bash

      - name: Upload binary to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ matrix.asset_name }}.*
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }} # Auto-detect pre-release from tag
          generate_release_notes: true
          body: |
            ## Installation

            ### macOS/Linux
            ```bash
            # Download the appropriate binary for your platform
            curl -LO https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ matrix.asset_name }}.tar.gz
            tar xzf ${{ matrix.asset_name }}.tar.gz
            chmod +x codecho
            sudo mv codecho /usr/local/bin/
            ```

            ### Windows
            Download `codecho-windows-amd64.exe.zip` and extract to a directory in your PATH.

            ## What's Changed
            See the auto-generated release notes below for changes in this version.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-release-notes:
    name: Update Release Notes
    needs: build-and-release
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update release with consolidated info
        uses: softprops/action-gh-release@v2
        with:
          body: |
            ## üéâ Release ${{ github.ref_name }}

            ### üì¶ Installation

            #### macOS (Intel)
            ```bash
            curl -LO https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/codecho-macos-amd64.tar.gz
            tar xzf codecho-macos-amd64.tar.gz
            chmod +x codecho
            sudo mv codecho /usr/local/bin/
            ```

            #### macOS (Apple Silicon)
            ```bash
            curl -LO https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/codecho-macos-arm64.tar.gz
            tar xzf codecho-macos-arm64.tar.gz
            chmod +x codecho
            sudo mv codecho /usr/local/bin/
            ```

            #### Linux (x86_64)
            ```bash
            curl -LO https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/codecho-linux-amd64.tar.gz
            tar xzf codecho-linux-amd64.tar.gz
            chmod +x codecho
            sudo mv codecho /usr/local/bin/
            ```

            #### Linux (ARM64)
            ```bash
            curl -LO https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/codecho-linux-arm64.tar.gz
            tar xzf codecho-linux-arm64.tar.gz
            chmod +x codecho
            sudo mv codecho /usr/local/bin/
            ```

            #### Windows
            Download `codecho-windows-amd64.exe.zip`, extract, and add to your PATH.

            ### üîß Verify Installation
            ```bash
            codecho --version
            ```

            ### üìù Changelog
            Auto-generated from commits since last release.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

